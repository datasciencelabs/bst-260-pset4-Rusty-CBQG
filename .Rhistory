facet_wrap(~year, scales = "free_x") +
labs(x = "Population",
y = "State",
title = "US State Populations in 2020 and 2021")
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
# regions <- use jsonlit JSON parser
# regions <- convert list to data frame. You can use map_df in purrr package
regions <- fromJSON(url) |>
unnest_longer(states) |>
rename(state_name = states) |>
mutate(
region = as.integer(region),
region_name = ifelse(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"NNPV",
region_name
)
) |>
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
select(state_name, region, region_name)
#nrow(regions)
#unique(regions$region_name)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as.tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
nrow(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
nrow(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases <- cases_raw |>
transmute(state = state,
date = as.Data(submission_date),
cases = as.numeric(new_cases))
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases <- cases_raw |>
transmute(state = state,
date = as.Date(submission_date),
cases = as.numeric(new_cases))
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
cases <- cases_raw |>
transmute(state = state,
date = as.Date(end_date),
cases = as.numeric(new_cases))
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population, by = "state") |>
filter(!is.na(date),
!is.na(cases),
!is.na(state),
!is.na(region_name)) |>
ggplot(aes(x = date, y = 100000*(cases/population), col = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~region_name)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population, by = "state") |>
filter(!is.na(date),
!is.na(cases),
!is.na(state),
!is.na(region_name)) |>
ggplot(aes(x = date, y = 100000*(cases/population), col = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~region_name)
str(cases)
str(cases)
str(population)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
left_join(population|> select(state,
pop_2020,
pop_2021,
region_name),
by = "state") |>
mutate(denom = if_else(year == 2020, pop_2020, pop_2021),
rate  = 100000 * cases / denom) |>
filter(!is.na(date),
!is.na(cases),
!is.na(rate),
!is.na(region_name)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~ region_name, scales = "free_y")
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(population|> select(state,
pop_2020,
pop_2021,
region_name),
by = "state") |>
mutate(denom = if_else(year == 2020, pop_2020, pop_2021),
rate  = 100000 * cases / denom) |>
filter(!is.na(date),
!is.na(cases),
!is.na(rate),
!is.na(region_name)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~ region_name, scales = "free_y")
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(population|> select(state,
pop_2020,
pop_2021,
region_name),
by = "state") |>
mutate(denom = if_else(year == 2020, pop_2020, pop_2021),
rate  = 100000 * cases / denom) |>
filter(!is.na(date),
!is.na(cases),
!is.na(rate),
!is.na(region_name)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~ region_name, scales = "free_y")
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases)
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month_name = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month_num, month) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month_name, total_cases)
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month_name = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month_num, month_name) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month_name, total_cases) |>
kable()
library(lubridate)
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month_name = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month_num, month_name) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month_name, total_cases) |>
kable()
library(lubridate)
library(knitr)
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month_name = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month_num, month_name) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month_name, total_cases) |>
kable()
library(lubridate)
library(knitr)
cases |>
filter(!is.na(date),
!is.na(cases)) |>
mutate(year = year(date),
month_num = month(date),
month_name = month(date, label = TRUE, abbr = FALSE)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month_num, month_name) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month_name, total_cases) |>
kable()
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state  = state,
date   = as.Date(submission_date),
deaths = suppressWarnings(as.numeric(new_death))
) |>
filter(!is.na(date), !is.na(deaths))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state  = state,
date   = as.Date(submission_date),
deaths = suppressWarnings(as.numeric(new_death))
) |>
filter(!is.na(date), !is.na(deaths))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state  = state,
date   = as.Date(submission_date),
deaths = suppressWarnings(as.numeric(new_death))
) |>
filter(!is.na(date), !is.na(deaths))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state  = state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state  = state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
View(death)
req <- request(deaths_url)
res <- req |>
req_perform()
resp_status(res)
req <- request(deaths_url)
res <- req |>
req_perform()
resp_status(res)
req <- request(deaths_url)
res <- req |>
req_perform()
resp_status(res)
req <- request(deaths_url)
res <- req |>
req_perform()
resp_status(res)
req <- request(deaths_url)
res <- req |>
req_perform()
resp_status(res)
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "DC", "PR"))
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "District of Columbia", "Puerto Rico"))
death |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_max(total_deaths, n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
View(death)
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
#filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.abb, "District of Columbia", "Puerto Rico"))
View(death)
death <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble() |>
transmute(
state = state,
date = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
) |>
filter(!is.na(date), !is.na(deaths)) |>
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico"))
death |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_max(total_deaths, n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
death |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_max(total_deaths, n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
death |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_max(total_deaths, n = 10) |>
arrange(desc(total_deaths)) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
death |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_max(total_deaths, n = 10) |>
arrange(desc(total_deaths)) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
#| fig-width: 10
#| fig-height: 6
#| fig-align: "center"
#| dpi: 300
# population |>
# reorder state
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |>
pivot_longer(cols = c(pop_2020, pop_2021),
names_to = "year",
values_to = "population") |>
mutate(order = ave(population, state_name, FUN = mean)) |>
ggplot(aes(x = population,
y = reorder(state_name, order),
fill = year)) +
geom_col(show.legend = FALSE) +
facet_wrap(~year, scales = "free_x") +
labs(x = "Population",
y = "State",
title = "US State Populations in 2020 and 2021")
#| fig-width: 10
#| fig-height: 6
#| fig-align: "center"
#| dpi: 300
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(population|> select(state,
pop_2020,
pop_2021,
region_name),
by = "state") |>
mutate(denom = if_else(year == 2020, pop_2020, pop_2021),
rate  = 100000 * cases / denom) |>
filter(!is.na(date),
!is.na(cases),
!is.na(rate),
!is.na(region_name)) |>
ggplot(aes(x = date, y = rate, color = state)) +
geom_line() +
labs(x = "Time",
y = "Cases per 100,000 during 2020-2021") +
facet_wrap(~ region_name, scales = "free_y")
